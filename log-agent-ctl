#!/bin/bash

set -e

CONFIG_DIR="/etc/log-forwarder-agent"
INSTALL_DIR="/opt/log-forwarder-agent"
MONITOR_RULES_FILE="$CONFIG_DIR/monitor_rules.json"
ACTION_RULES_FILE="$CONFIG_DIR/action_rules.json"
SERVICE_NAME="log-agent.service"
SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "This command requires root privileges. Please use 'sudo'." >&2
        exit 1
    fi
}

check_jq() {
    if ! command -v jq &> /dev/null; then
        echo "'jq' is not installed, but it is required for modifying rules." >&2
        echo "Please install it using your package manager (e.g., 'sudo apt-get install jq')." >&2
        exit 1
    fi
}

restart_service() {
    echo "Restarting the agent to apply changes..."
    systemctl restart "$SERVICE_NAME"
    echo "Service restarted."
}

show_config() {
    echo "--- Current Configuration ---"
    echo ""
    echo "Monitor Rules ($MONITOR_RULES_FILE):"
    jq . "$MONITOR_RULES_FILE"
    echo ""
    echo "Action Rules ($ACTION_RULES_FILE):"
    jq . "$ACTION_RULES_FILE"
    echo "---------------------------"
}

add_source() {
    check_root
    check_jq
    if [ -z "$2" ]; then
        echo "Usage: sudo log-agent-ctl add-source <id> <path> [events]" >&2
        exit 1
    fi
    ID=$1
    PATH_VAL=$2
    EVENTS=${3:-"CREATE,MODIFY,DELETE"}

    jq --arg id "$ID" --arg path "$PATH_VAL" --arg events "$EVENTS" \
       '.sources += [{"id": $id, "path": $path, "enabled_events": ($events | split(","))}]' \
       "$MONITOR_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$MONITOR_RULES_FILE"
    echo "Added source '$ID'."
    restart_service
}

add_destination_file() {
    check_root
    check_jq
    if [ -z "$2" ]; then
        echo "Usage: sudo log-agent-ctl add-destination-file <id> <path>" >&2
        exit 1
    fi
    ID=$1
    PATH_VAL=$2
    jq --arg id "$ID" --arg path "$PATH_VAL" \
       '.destinations += [{"id": $id, "type": "file", "path": $path, "source_ids": []}]' \
       "$ACTION_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$ACTION_RULES_FILE"
    echo "Added FILE destination '$ID'."
    restart_service
}

add_destination_syslog() {
    check_root
    check_jq
    if [ -z "$3" ]; then
        echo "Usage: sudo log-agent-ctl add-destination-syslog <id> <host> <port> [token]" >&2
        exit 1
    fi
    ID=$1
    HOST=$2
    PORT=$3
    TOKEN=$4
    if [ -n "$TOKEN" ]; then
        jq --arg id "$ID" --arg host "$HOST" --argjson port "$PORT" --arg token "$TOKEN" \
           '.destinations += [{"id": $id, "type": "syslog", "host": $host, "port": $port, "protocol": "udp", "token": $token, "source_ids": []}]' \
           "$ACTION_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$ACTION_RULES_FILE"
    else
        jq --arg id "$ID" --arg host "$HOST" --argjson port "$PORT" \
           '.destinations += [{"id": $id, "type": "syslog", "host": $host, "port": $port, "protocol": "udp", "source_ids": []}]' \
           "$ACTION_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$ACTION_RULES_FILE"
    fi
    echo "Added SYSLOG destination '$ID'."
    restart_service
}

add_destination_http() {
    check_root
    check_jq
    if [ -z "$2" ]; then
        echo "Usage: sudo log-agent-ctl add-destination-http <id> <url> [token]" >&2
        exit 1
    fi
    ID=$1
    URL=$2
    TOKEN=$3
    if [ -n "$TOKEN" ]; then
        jq --arg id "$ID" --arg url "$URL" --arg token "$TOKEN" \
           '.destinations += [{"id": $id, "type": "http", "url": $url, "token": $token, "source_ids": []}]' \
           "$ACTION_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$ACTION_RULES_FILE"
    else
        jq --arg id "$ID" --arg url "$URL" \
           '.destinations += [{"id": $id, "type": "http", "url": $url, "source_ids": []}]' \
           "$ACTION_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$ACTION_RULES_FILE"
    fi
    echo "Added HTTP destination '$ID'."
    restart_service
}

clear_sources() {
    check_root
    check_jq
    echo '{"sources": []}' > "$MONITOR_RULES_FILE"
    echo "All sources have been cleared."
    restart_service
}

clear_destinations() {
    check_root
    check_jq
    echo '{"destinations": []}' > "$ACTION_RULES_FILE"
    echo "All destinations have been cleared."
    restart_service
}

link_source() {
    check_root
    check_jq
    if [ -z "$2" ]; then
        echo "Usage: sudo log-agent-ctl link-source <source_id> <destination_id>" >&2
        exit 1
    fi
    SOURCE_ID=$1
    DEST_ID=$2
    jq --arg sid "$SOURCE_ID" --arg did "$DEST_ID" \
       '(.destinations[] | select(.id == $did) | .source_ids) |= (. + [$sid] | unique)' \
       "$ACTION_RULES_FILE" > tmp.$$.json && mv tmp.$$.json "$ACTION_RULES_FILE"
    echo "Linked source '$SOURCE_ID' to destination '$DEST_ID'."
    restart_service
}

uninstall() {
    check_root
    echo "This will completely remove the Log Forwarding Agent and all its configuration."
    read -p "Are you sure you want to continue? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstall cancelled."
        exit 1
    fi

    echo "Stopping and disabling the service..."
    systemctl stop "$SERVICE_NAME" || true
    systemctl disable "$SERVICE_NAME" || true

    echo "Removing agent files and configuration..."
    rm -f "$SERVICE_FILE"
    rm -rf "$INSTALL_DIR"
    rm -rf "$CONFIG_DIR"

    echo "Reloading systemd daemon..."
    systemctl daemon-reload

    echo "Removing the log-agent-ctl command..."
    rm -f "/usr/local/bin/log-agent-ctl"

    echo "âœ… Uninstallation complete."
}

usage() {
    echo "log-agent-ctl - Log Forwarding Agent Management Tool"
    echo ""
    echo "Usage: log-agent-ctl [command]"
    echo ""
    echo "Available Commands:"
    echo "  help                                 Shows this help message."
    echo "  show-config                          Displays the current monitoring and action rules."
    echo "  uninstall                            Completely removes the agent from the system."
    echo ""
    echo "Configuration Commands (require sudo):"
    echo "  add-source <id> <path> [events]        Adds a new source file to monitor."
    echo "  add-destination-file <id> <path>       Adds a new local file destination."
    echo "  add-destination-syslog <id> <host> <port> [token] Adds a new remote syslog destination."
    echo "  add-destination-http <id> <url> [token]     Adds a new remote HTTP endpoint destination."
    echo "  link-source <source_id> <destination_id> Links a source to a destination."
    echo "  clear-sources                          Removes all configured sources."
    echo "  clear-destinations                     Removes all configured destinations."
}

case "$1" in
    show-config)
        show_config
        ;;
    add-source)
        add_source "$2" "$3" "$4"
        ;;
    add-destination-file)
        add_destination_file "$2" "$3"
        ;;
    add-destination-syslog)
        add_destination_syslog "$2" "$3" "$4" "$5"
        ;;
    add-destination-http)
        add_destination_http "$2" "$3" "$4"
        ;;
    link-source)
        link_source "$2" "$3"
        ;;
    clear-sources)
        clear_sources
        ;;
    clear-destinations)
        clear_destinations
        ;;
    uninstall)
        uninstall
        ;;
    help|--help|-h|"")
        usage
        ;;
    *)
        echo "Error: Unknown command '$1'" >&2
        usage
        exit 1
        ;;
esac
